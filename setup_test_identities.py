#!/usr/bin/env python3
"""
Setup script for test identities (fl_client_1, fl_client_2, fl_client_3, fl_server).
Creates the identities and generates environment files for testing.
"""

import subprocess
import os
import sys
from pathlib import Path

def run_command(cmd, input_text=None):
    """Run a command and return success status and output."""
    try:
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            input=input_text,
            check=True
        )
        return True, result.stdout.strip(), result.stderr.strip()
    except subprocess.CalledProcessError as e:
        return False, e.stdout, e.stderr

def create_test_identity(identity_name):
    """Create a test identity."""
    print(f"Creating test identity: {identity_name}")
    
    # Check if identity already exists
    success, stdout, _ = run_command(["dfx", "identity", "list"])
    if success and identity_name in stdout:
        print(f"  ‚úÖ Identity '{identity_name}' already exists")
        return True
    
    # Create new identity with empty password
    success, stdout, stderr = run_command(
        ["dfx", "identity", "new", identity_name, "--storage-mode", "password-protected"],
        input_text="\n\n"  # Empty password, confirm empty password
    )
    
    if success:
        print(f"  ‚úÖ Identity '{identity_name}' created successfully")
        return True
    else:
        print(f"  ‚ùå Failed to create identity '{identity_name}': {stderr}")
        return False

def get_principal_id(identity_name):
    """Get the principal ID for an identity."""
    # Switch to the identity
    success, _, _ = run_command(["dfx", "identity", "use", identity_name])
    if not success:
        return None
    
    # Get principal ID
    success, principal, _ = run_command(["dfx", "identity", "get-principal"])
    if success:
        return principal
    return None

def create_test_env_files(principals):
    """Create environment files for testing."""
    print("\nüìù Creating test environment files...")
    
    # Main test .env file
    env_content = f"""# Test Environment Configuration for FL Identities
# Generated by setup_test_identities.py

# =============================================================================
# SERVER CONFIGURATION (fl_server)
# =============================================================================
ICP_SERVER_PRINCIPAL_ID={principals.get('fl_server', 'fl-server-principal-id')}
ICP_SERVER_SEED_PHRASE="test server seed phrase for fl_server identity"

# =============================================================================
# DEFAULT CLIENT CONFIGURATION (fl_client_1)
# =============================================================================
ICP_CLIENT_PRINCIPAL_ID={principals.get('fl_client_1', 'fl-client-1-principal-id')}
ICP_CLIENT_SEED_PHRASE="test client seed phrase for fl_client_1 identity"
ICP_CLIENT_IDENTITY_NAME=fl_client_1

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
ICP_NETWORK=local
ICP_CANISTER_ID=your-canister-id-here

# =============================================================================
# FEDERATED LEARNING CONFIGURATION
# =============================================================================
FL_SERVER_ADDRESS=127.0.0.1:8080
FL_ROUNDS_DEFAULT=3
FL_MIN_CLIENTS=1
FL_CLIENT_TIMEOUT=120
"""
    
    with open(".env.test", "w") as f:
        f.write(env_content)
    print("  ‚úÖ .env.test file created")
    
    # Create client-specific test env files
    client_dir = Path("client")
    client_dir.mkdir(exist_ok=True)
    
    for i in range(1, 4):
        identity_name = f"fl_client_{i}"
        principal = principals.get(identity_name, f"fl-client-{i}-principal-id")
        
        client_env_content = f"""# Test Client {i} Environment Configuration
# Identity: {identity_name}

# =============================================================================
# CLIENT IDENTITY CONFIGURATION
# =============================================================================
ICP_CLIENT_PRINCIPAL_ID={principal}
ICP_CLIENT_SEED_PHRASE="test client {i} seed phrase for {identity_name}"
ICP_CLIENT_IDENTITY_NAME={identity_name}

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
ICP_NETWORK=local
ICP_CANISTER_ID=your-canister-id-here

# =============================================================================
# FEDERATED LEARNING CONFIGURATION
# =============================================================================
FL_SERVER_ADDRESS=127.0.0.1:8080
FL_DATASET_PATH=dataset/clients/client{i}_data.csv
FL_CONNECTION_TIMEOUT=30

# =============================================================================
# CLIENT METADATA
# =============================================================================
CLIENT_NAME=Test Healthcare Provider {i}
CLIENT_ORGANIZATION=Test Hospital {i}
CLIENT_LOCATION=Test City {i}, Test Country
CLIENT_CONTACT_EMAIL=test{i}@hospital-test.com
"""
        
        env_file = client_dir / f".env.{identity_name}"
        with open(env_file, "w") as f:
            f.write(client_env_content)
        
        print(f"  ‚úÖ client/.env.{identity_name} created")

def main():
    """Main setup function."""
    print("üß™ Test Identity Setup for Federated Learning")
    print("=" * 60)
    
    # Check if dfx is available
    success, _, _ = run_command(["dfx", "--version"])
    if not success:
        print("‚ùå dfx is not installed or not in PATH")
        return 1
    
    print("‚úÖ dfx is available")
    
    # Create test identities
    test_identities = ["fl_server", "fl_client_1", "fl_client_2", "fl_client_3"]
    principals = {}
    
    print(f"\nüîß Creating {len(test_identities)} test identities...")
    for identity in test_identities:
        if create_test_identity(identity):
            principal = get_principal_id(identity)
            if principal:
                principals[identity] = principal
                print(f"  üìã {identity}: {principal}")
            else:
                print(f"  ‚ùå Failed to get principal for {identity}")
        else:
            print(f"  ‚ùå Failed to create {identity}")
    
    if len(principals) != len(test_identities):
        print("‚ùå Failed to create all required identities")
        return 1
    
    # Create environment files
    create_test_env_files(principals)
    
    print("\n" + "=" * 60)
    print("üéâ Test identity setup completed successfully!")
    print("\nCreated identities:")
    for identity, principal in principals.items():
        print(f"   ‚Ä¢ {identity}: {principal}")
    
    print("\nNext steps:")
    print("1. Copy .env.test to .env if you want to use these test identities")
    print("2. Deploy your ICP canister and update ICP_CANISTER_ID in the env files")
    print("3. Run the test: uv run python test_identity_management.py")
    print("4. Or run federated learning: uv run python run_federated_learning.py")
    print("=" * 60)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
