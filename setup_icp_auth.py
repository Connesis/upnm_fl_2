#!/usr/bin/env python3
"""
Setup script for ICP federated learning authentication system.
This script helps configure identities, roles, and environment files.
"""
import subprocess
import os
import sys
from pathlib import Path


def run_command(cmd, cwd=None, capture_output=True):
    """Run a shell command and return the result."""
    try:
        result = subprocess.run(
            cmd, 
            shell=True, 
            capture_output=capture_output, 
            text=True, 
            cwd=cwd
        )
        return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return False, "", str(e)


def check_dfx_installed():
    """Check if dfx is installed."""
    success, _, _ = run_command("dfx --version")
    return success


def create_identity(name, storage_mode="password-protected"):
    """Create a new dfx identity."""
    print(f"Creating identity: {name}")
    
    # Check if identity already exists
    success, stdout, _ = run_command("dfx identity list")
    if success and name in stdout:
        print(f"  ‚úÖ Identity '{name}' already exists")
        return True
    
    # Create new identity
    cmd = f"dfx identity new {name} --storage-mode {storage_mode}"
    success, stdout, stderr = run_command(cmd, capture_output=False)
    
    if success:
        print(f"  ‚úÖ Identity '{name}' created successfully")
        return True
    else:
        print(f"  ‚ùå Failed to create identity '{name}': {stderr}")
        return False


def get_principal_id(identity_name):
    """Get the principal ID for an identity."""
    # Switch to the identity
    success, _, _ = run_command(f"dfx identity use {identity_name}")
    if not success:
        return None
    
    # Get principal ID
    success, principal, _ = run_command("dfx identity get-principal")
    if success:
        return principal
    return None


def setup_identities():
    """Set up all required identities."""
    print("\nüîß Setting up ICP identities...")
    
    identities = ["admin", "server", "client1", "client2", "client3"]
    principals = {}
    
    for identity in identities:
        if create_identity(identity):
            principal = get_principal_id(identity)
            if principal:
                principals[identity] = principal
                print(f"  üìã {identity}: {principal}")
            else:
                print(f"  ‚ùå Failed to get principal for {identity}")
        else:
            print(f"  ‚ùå Failed to create {identity}")
    
    return principals


def create_env_file(principals):
    """Create the main .env file."""
    print("\nüìù Creating .env file...")
    
    env_content = f"""# ICP Federated Learning Environment Configuration
# Generated by setup_icp_auth.py

# =============================================================================
# ADMIN CONFIGURATION
# =============================================================================
ICP_ADMIN_PRINCIPAL_ID={principals.get('admin', 'your-admin-principal-id')}
ICP_ADMIN_SEED_PHRASE="your twelve word admin seed phrase here"

# =============================================================================
# SERVER CONFIGURATION  
# =============================================================================
ICP_SERVER_PRINCIPAL_ID={principals.get('server', 'your-server-principal-id')}
ICP_SERVER_SEED_PHRASE="your twelve word server seed phrase here"

# =============================================================================
# CLIENT CONFIGURATION (Default client)
# =============================================================================
ICP_CLIENT_PRINCIPAL_ID={principals.get('client1', 'your-client-principal-id')}
ICP_CLIENT_SEED_PHRASE="your twelve word client seed phrase here"
ICP_CLIENT_IDENTITY_NAME=client1

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
ICP_NETWORK=local
ICP_CANISTER_ID=your-canister-id-here

# =============================================================================
# FEDERATED LEARNING CONFIGURATION
# =============================================================================
FL_SERVER_ADDRESS=127.0.0.1:8080
FL_ROUNDS_DEFAULT=3
FL_MIN_CLIENTS=1
FL_CLIENT_TIMEOUT=120

# =============================================================================
# CLIENT METADATA
# =============================================================================
CLIENT_NAME=Healthcare Provider 1
CLIENT_ORGANIZATION=Hospital ABC
CLIENT_LOCATION=City, Country
CLIENT_CONTACT_EMAIL=admin@hospital-abc.com

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
FL_AUTO_APPROVE_CLIENTS=false
FL_MAX_PENDING_CLIENTS=100
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("  ‚úÖ .env file created")


def create_client_env_files(principals):
    """Create client-specific .env files."""
    print("\nüìù Creating client .env files...")
    
    client_dir = Path("client")
    client_dir.mkdir(exist_ok=True)
    
    for i, (identity, principal) in enumerate([(k, v) for k, v in principals.items() if k.startswith('client')], 1):
        env_content = f"""# Client {i} Environment Configuration

# =============================================================================
# CLIENT IDENTITY CONFIGURATION
# =============================================================================
ICP_CLIENT_PRINCIPAL_ID={principal}
ICP_CLIENT_SEED_PHRASE="your unique twelve word client seed phrase"
ICP_CLIENT_IDENTITY_NAME={identity}

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
ICP_NETWORK=local
ICP_CANISTER_ID=your-canister-id-here

# =============================================================================
# FEDERATED LEARNING CONFIGURATION
# =============================================================================
FL_SERVER_ADDRESS=127.0.0.1:8080
FL_DATASET_PATH=dataset/clients/{identity}_data.csv
FL_CONNECTION_TIMEOUT=30

# =============================================================================
# CLIENT METADATA
# =============================================================================
CLIENT_NAME=Healthcare Provider {i}
CLIENT_ORGANIZATION=Hospital {chr(64 + i)}
CLIENT_LOCATION=City {i}, Country
CLIENT_CONTACT_EMAIL=admin@hospital-{chr(96 + i)}.com
"""
        
        env_file = client_dir / f".env.{identity}"
        with open(env_file, "w") as f:
            f.write(env_content)
        
        print(f"  ‚úÖ client/.env.{identity} created")


def deploy_canister():
    """Deploy the ICP canister."""
    print("\nüöÄ Deploying ICP canister...")
    
    # Check if dfx is running
    success, _, _ = run_command("dfx ping")
    if not success:
        print("  üîÑ Starting dfx...")
        run_command("dfx start --background", capture_output=False)
    
    # Deploy canister
    icp_dir = Path("icp/fl_cvd_backend")
    if icp_dir.exists():
        success, stdout, stderr = run_command("dfx deploy", cwd=str(icp_dir), capture_output=False)
        if success:
            print("  ‚úÖ Canister deployed successfully")
            
            # Get canister ID
            success, canister_id, _ = run_command("dfx canister id fl_cvd_backend_backend", cwd=str(icp_dir))
            if success:
                print(f"  üìã Canister ID: {canister_id}")
                return canister_id
        else:
            print(f"  ‚ùå Failed to deploy canister: {stderr}")
    else:
        print("  ‚ùå ICP project directory not found")
    
    return None


def update_env_with_canister_id(canister_id):
    """Update .env files with the actual canister ID."""
    if not canister_id:
        return
    
    print(f"\nüìù Updating .env files with canister ID: {canister_id}")
    
    # Update main .env file
    if os.path.exists(".env"):
        with open(".env", "r") as f:
            content = f.read()
        
        content = content.replace("ICP_CANISTER_ID=your-canister-id-here", f"ICP_CANISTER_ID={canister_id}")
        
        with open(".env", "w") as f:
            f.write(content)
        
        print("  ‚úÖ Main .env file updated")
    
    # Update client .env files
    client_dir = Path("client")
    for env_file in client_dir.glob(".env.*"):
        with open(env_file, "r") as f:
            content = f.read()
        
        content = content.replace("ICP_CANISTER_ID=your-canister-id-here", f"ICP_CANISTER_ID={canister_id}")
        
        with open(env_file, "w") as f:
            f.write(content)
        
        print(f"  ‚úÖ {env_file} updated")


def main():
    """Main setup function."""
    print("üîó ICP Federated Learning Authentication Setup")
    print("=" * 60)
    
    # Check prerequisites
    if not check_dfx_installed():
        print("‚ùå dfx is not installed. Please install dfx first:")
        print("   https://internetcomputer.org/docs/current/developer-docs/setup/install/")
        return 1
    
    print("‚úÖ dfx is installed")
    
    # Set up identities
    principals = setup_identities()
    
    if not principals:
        print("‚ùå Failed to set up identities")
        return 1
    
    # Create environment files
    create_env_file(principals)
    create_client_env_files(principals)
    
    # Deploy canister
    canister_id = deploy_canister()
    
    # Update env files with canister ID
    update_env_with_canister_id(canister_id)
    
    print("\n" + "=" * 60)
    print("üéâ Setup completed successfully!")
    print("\nNext steps:")
    print("1. Initialize admin role:")
    print("   uv run python icp_cli.py init-admin")
    print("\n2. Set up server role:")
    print(f"   uv run python icp_cli.py setup-server {principals.get('server', 'SERVER_PRINCIPAL')}")
    print("\n3. Start federated learning:")
    print("   uv run python icp_cli.py quick-train")
    print("=" * 60)
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
